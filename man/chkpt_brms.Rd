% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chkpt_brms.R
\name{chkpt_brms}
\alias{chkpt_brms}
\title{Checkpoint Sampling: brms}
\usage{
chkpt_brms(
  formula,
  data,
  iter_warmup = 1000,
  iter_sampling = 1000,
  iter_per_chkpt = 100,
  iter_typical = 150,
  parallel_chains = 2,
  threads_per = 1,
  chkpt_progress = TRUE,
  control = NULL,
  brmsfit = TRUE,
  seed = 1,
  stop_after = NULL,
  reset = FALSE,
  path,
  ...
)
}
\arguments{
\item{formula}{An object of class \code{\link[stats]{formula}},
\code{\link[brms]{brmsformula}}, or \code{\link{brms}{mvbrmsformula}}.
Further information can be found in  \code{\link[brms]{brmsformula}}.}

\item{data}{An object of class \code{data.frame} (or one that can be coerced
to that class) containing data of all variables used in the model.}

\item{iter_warmup}{(positive integer) The number of warmup iterations to run
per chain (defaults to 1000).}

\item{iter_sampling}{(positive integer) The number of post-warmup iterations
to run per chain (defaults to 1000).}

\item{iter_per_chkpt}{(positive integer). The number of iterations per
checkpoint. Note that \code{iter_sampling} is divided by
\code{iter_per_chkpt} to determine the number of checkpoints. This must
result in an integer (if not, there will be an error).}

\item{iter_typical}{(positive integer) The number of iterations in the
initial warmup, which finds the so-called typical set. This is an initial
phase, and not included in \code{iter_warmup}. Note that a large enough
value is required to ensure convergence (defaults to 150).}

\item{parallel_chains}{(positive integer) The \emph{maximum number} of MCMC
chains to run in parallel. If parallel_chains is not specified then the
default is to look for the option \code{mc.cores}, which can be set for an
entire R session by \code{options(mc.cores=value)}. If the \code{mc.cores}
option has not been set then the default is \code{1}.}

\item{threads_per}{(positive integer) Number of threads to use in
within-chain parallelization (defaults to \code{1}).}

\item{chkpt_progress}{logical. Should the \code{chkptstanr} progress be
printed (defaults to \code{TRUE}) ? If set to \code{FALSE}, the standard
\code{cmdstanr} progress bar is printed for each checkpoint (which does not
actually keep track of checkpointing progress)}

\item{control}{A named list of parameters to control the sampler's behavior.
It defaults to NULL so all the default values are used. For a comprehensive
overview see \code{\link[rstan]{stan}}.}

\item{brmsfit}{Logical. Should a \code{brmsfit} object be returned (defaults
to \code{TRUE}).}

\item{seed}{(positive integer). The seed for random number generation to make
results reproducible.}

\item{stop_after}{(positive integer). The number of iterations to sample
before stopping. If \code{NULL}, then all iterations are sampled (defaults
to \code{NULL}). Note that sampling will stop at the end of the first
checkpoint which has an iteration number greater than or equal to
\code{stop_after}.}

\item{reset}{logical. Should the checkpointing be reset? If \code{TRUE}, then
the model will begin sampling from the beginning (defaults to
\code{FALSE}). WARNING: This will remove all previous checkpointing
information (see \code{\link[=reset_checkpoints]{reset_checkpoints()}}). If the model is unchanged and previously
compiled, sampling will begin without recompiling the model.}

\item{path}{Character string. The path to the folder, that is used for saving
the checkpoints (see Details). You can provide either a relative path to
the current working directory or a full path. You no longer need to create
the folder, as this is done automatically.}

\item{...}{Any additional arguments passed to \code{\link[brms]{brm}},
including, but not limited to, user-defined prior distributions, the
\code{\link[brms]{brmsfamily}} (e.g., \code{family = poisson())}, data2,
custom_families, etc.}
}
\value{
An object of class \code{brmsfit} (with \code{brmsfit = TRUE}) or
\code{chkpt_brms} (with \code{brmsfit = FALSE}).
}
\description{
Fit Bayesian generalized (non-)linear multivariate multilevel
models using brms with checkpointing.
}
\note{
A folder specified by \code{path} is created with four subfolders:

\itemize{

\item \strong{cmd_fit}: The cmdstanr fittted models (one for each checkpoint).

\item \strong{cp_info}: Mass matrix, step size, and initial values for
next checkpoint (last iteration from previous checkpoint).

\item \strong{cp_samples}: Samples from the posterior distribution
(post warmup)

\item \strong{stan_model}: Complied \strong{Stan} model

}
}
\examples{
\dontrun{
library(brms)
library(cmdstanr)


# "random" intercept
fit1 <- chkpt_brms(
  bf(
    formula = count ~ zAge + zBase * Trt + (1 | patient),
    family = poisson()
  ),
  data = epilepsy, ,
  iter_warmup = 1000,
  iter_sampling = 1000,
  iter_per_chkpt = 250,
  path = "chkpt_folder_fit1"
)

# brmsfit output
fit1


# remove "random" intercept (for model comparison)
fit2 <- chkpt_brms(
  bf(
    formula = count ~ zAge + zBase * Trt,
    family = poisson()
  ),
  data = epilepsy, ,
  iter_warmup = 1000,
  iter_sampling = 1000,
  iter_per_chkpt = 250,
  path = "chkpt_folder_fit2"
)

# brmsfit output
fit2

# compare models
loo(fit1, fit2)


# priors
bprior <- prior(constant(1), class = "b") +
  prior(constant(2), class = "b", coef = "zBase") +
  prior(constant(0.5), class = "sd")

# fit model
fit3 <-
  chkpt_brms(
    bf(
      formula = count ~ zAge + zBase + (1 | patient),
      family = poisson()
    ),
    data = epilepsy,
    path = "chkpt_folder_fit3",
    prior = bprior,
    iter_warmup = 1000,
    iter_sampling = 1000,
    iter_per_chkpt = 250,
  )

# check priors
prior_summary(fit3)
}
}
